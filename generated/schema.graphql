### This file was generated by Nexus Schema
### Do not make changes to this file directly


scalar DateTime

type Mutation {
  createOneUser(data: UserCreateInput!): User!
  deleteAllUsers: String
}

type Query {
  getAllUsers: [User]
  user(where: UserWhereUniqueInput!): User
  users(after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int, last: Int): [User!]!
}

input TodoCreateManyUserInput {
  body: String!
  createdAt: DateTime
  id: Int
  title: String!
}

input TodoCreateManyUserInputEnvelope {
  data: [TodoCreateManyUserInput!]
  skipDuplicates: Boolean
}

input TodoCreateNestedManyWithoutUserInput {
  connect: [TodoWhereUniqueInput!]
  connectOrCreate: [TodoCreateOrConnectWithoutUserInput!]
  create: [TodoCreateWithoutUserInput!]
  createMany: TodoCreateManyUserInputEnvelope
}

input TodoCreateOrConnectWithoutUserInput {
  create: TodoCreateWithoutUserInput!
  where: TodoWhereUniqueInput!
}

input TodoCreateWithoutUserInput {
  body: String!
  createdAt: DateTime
  title: String!
}

input TodoWhereUniqueInput {
  id: Int
}

type User {
  id: Int!
  name: String
}

input UserCreateInput {
  Todo: TodoCreateNestedManyWithoutUserInput
  createdAt: DateTime
  email: String
  emailVerified: DateTime
  image: String
  name: String
  updatedAt: DateTime
}

input UserWhereUniqueInput {
  email: String
  id: Int
}
